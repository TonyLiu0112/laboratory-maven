****************
工厂(抽象)方法模式
定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到了子类

实现的OO设计原则：
依赖倒置原则 -- 要依赖抽象，不要依赖具体的类。（A类中创建一个对象B，说明A是依赖于B的；
现在在A中创建一个抽象方法，使得A变成了一个抽象类，那么，B的实现是依赖于A的抽象方法了，这就是所谓的倒置。）
规避违反依赖倒置原则的建议
    1. 变量不要持有具体类的引用（也就是不要new一个对象出来）
    2. 不要让类派生自具体类（也就是不要继承具体的类）
    3. 不要覆盖基类中已实现的方法。（抽象类中已经实现的方法，应该是被子类共享的，因为有共同点，所以才被抽象出来嘛）

****************
抽象工厂模式
定义：提供一个接口，用户创建相关或依赖对象的家族，而不需要明确指定具体类。（也就是说定义一个接口，接口描述了构建一个产品的所有过程，不同的具
体产品有不同的实现）。
抽象工厂模式中往往会使用到工厂方法模式

eg：
披萨店生产披萨

披萨店分为不同地区的披萨店，每个地区的披萨店有不同种类的食材（比如有的是新鲜的蛤蜊，有的是冷冻的蛤蜊）
每个地区的做出来的同一款口味的披萨因为食材的不同，所以也属于不同的披萨

所以变动的部分是原料，如果新加一个店，新的店的原料可能是不同的，所以这部分要可以扩展，不变的部分是披萨的订单做法

原料：
Dough       面团
Sauce       酱油
Cheese      奶酪
Clams       蛤蜊
Pepperoni   意大利香肠
Veggies     蔬菜

店：
New York    纽约店
Chicago     芝加哥店